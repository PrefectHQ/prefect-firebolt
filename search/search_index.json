{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-firebolt Welcome! prefect-firebolt is a collection of Prefect integrations for working with Firebolt data warehouses. Firebolt is a Cloud Data Warehousing solution that helps its users streamline their Data Analytics and access to insights. For more information about getting started with Firebolt, read Firebolt's getting started guide . Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-firebolt with pip : pip install prefect-firebolt Then, register to view the Firebolt blocks on Prefect Cloud: prefect block register -m prefect_firebolt Note, to use the load method on Blocks, you must already have a block document saved through code or saved through the UI . Write and run a flow Execute a query against a Firebolt database: from prefect import flow from prefect_firebolt import FireboltCredentials , FireboltDatabase , query_firebolt @flow def run_firebolt_query (): firebolt_database_block = FireboltDatabase ( database = \"travel\" , credentials = FireboltCredentials ( username = \"arthur.dent@hitchhikers.com\" , password = \"dont42panic\" ), ) results = query_firebolt ( database = firebolt_database_block , query = \"SELECT * FROM ex_intergalactic_trips LIMIT 100\" , ) return results run_firebolt_query () Resources If you encounter any bugs while using prefect-firebolt , feel free to open an issue in the prefect-firebolt repository. If you have any questions or issues while using prefect-firebolt , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Feel free to \u2b50\ufe0f or watch prefect-firebolt for updates too! Development If you'd like to install a version of prefect-firebolt for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-firebolt.git cd prefect-firebolt/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-firebolt","text":"","title":"prefect-firebolt"},{"location":"#welcome","text":"prefect-firebolt is a collection of Prefect integrations for working with Firebolt data warehouses. Firebolt is a Cloud Data Warehousing solution that helps its users streamline their Data Analytics and access to insights. For more information about getting started with Firebolt, read Firebolt's getting started guide .","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-firebolt with pip : pip install prefect-firebolt Then, register to view the Firebolt blocks on Prefect Cloud: prefect block register -m prefect_firebolt Note, to use the load method on Blocks, you must already have a block document saved through code or saved through the UI .","title":"Installation"},{"location":"#write-and-run-a-flow","text":"Execute a query against a Firebolt database: from prefect import flow from prefect_firebolt import FireboltCredentials , FireboltDatabase , query_firebolt @flow def run_firebolt_query (): firebolt_database_block = FireboltDatabase ( database = \"travel\" , credentials = FireboltCredentials ( username = \"arthur.dent@hitchhikers.com\" , password = \"dont42panic\" ), ) results = query_firebolt ( database = firebolt_database_block , query = \"SELECT * FROM ex_intergalactic_trips LIMIT 100\" , ) return results run_firebolt_query ()","title":"Write and run a flow"},{"location":"#resources","text":"If you encounter any bugs while using prefect-firebolt , feel free to open an issue in the prefect-firebolt repository. If you have any questions or issues while using prefect-firebolt , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Feel free to \u2b50\ufe0f or watch prefect-firebolt for updates too!","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-firebolt for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-firebolt.git cd prefect-firebolt/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"credentials/","text":"prefect_firebolt.credentials Module for managing Firebolt credentials. FireboltCredentials Store credentials for authenticating with Firebolt. Attributes: Name Type Description username Optional [ str ] The email address associated with your Firebolt user. password Optional [ SecretStr ] The password used for connecting to Firebolt. token Optional [ SecretStr ] Authentication token to use instead of username and password. api_endpoint str Firebolt API endpoint used for authentication. account_name Optional [ str ] Name of the account to authenticate with. If not provided, the default account will be used. Source code in prefect_firebolt/credentials.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 class FireboltCredentials ( Block ): \"\"\" Store credentials for authenticating with Firebolt. Attributes: username: The email address associated with your Firebolt user. password: The password used for connecting to Firebolt. token: Authentication token to use instead of username and password. api_endpoint: Firebolt API endpoint used for authentication. account_name: Name of the account to authenticate with. If not provided, the default account will be used. \"\"\" _block_type_name = \"Firebolt Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/3loU17IXqVIWl4aWQfqc78/3c7eefe5e8cf4eec870856f10d7fdcce/5e8a264ceaf4870c90478037_Favicon_128.svg.png?h=250\" # noqa @root_validator def _ensure_valid_auth_method ( cls , values ): \"\"\" Checks to make sure that either username and password or a token is provided. \"\"\" has_username = values . get ( \"username\" ) is not None has_password = values . get ( \"password\" ) is not None has_token = values . get ( \"token\" ) is not None # No auth details provided if not any ([ has_password , has_username , has_token ]): raise ValueError ( \"You have not provided a username/password or token. \" \"Please provide either a username and password or a token.\" ) # Username/password and token provided if ( has_username or has_password ) and has_token : raise ValueError ( \"You have provided both a username/password and a token. \" \"Please provide either a username and password or a token.\" ) # Username/password not provided together if has_username ^ has_password : raise ValueError ( \"You have provided only a username or password. \" \"Please provide both a username and a password.\" ) return values username : Optional [ str ] = Field ( default = None , description = \"The email address associated with your Firebolt user.\" , ) password : Optional [ SecretStr ] = Field ( default = None , description = \"The password used for connecting to Firebolt.\" ) token : Optional [ SecretStr ] = Field ( default = None , description = \"Authentication token to use instead of username and password.\" , ) api_endpoint : str = Field ( default = DEFAULT_API_URL , title = \"API Endpoint\" , description = \"Firebolt API endpoint used for authentication.\" , ) account_name : Optional [ str ] = Field ( default = None , description = \"Name of the account to authenticate with. If not \" \"provided, the default account will be used.\" , )","title":"Credentials"},{"location":"credentials/#prefect_firebolt.credentials","text":"Module for managing Firebolt credentials.","title":"credentials"},{"location":"credentials/#prefect_firebolt.credentials.FireboltCredentials","text":"Store credentials for authenticating with Firebolt. Attributes: Name Type Description username Optional [ str ] The email address associated with your Firebolt user. password Optional [ SecretStr ] The password used for connecting to Firebolt. token Optional [ SecretStr ] Authentication token to use instead of username and password. api_endpoint str Firebolt API endpoint used for authentication. account_name Optional [ str ] Name of the account to authenticate with. If not provided, the default account will be used. Source code in prefect_firebolt/credentials.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 class FireboltCredentials ( Block ): \"\"\" Store credentials for authenticating with Firebolt. Attributes: username: The email address associated with your Firebolt user. password: The password used for connecting to Firebolt. token: Authentication token to use instead of username and password. api_endpoint: Firebolt API endpoint used for authentication. account_name: Name of the account to authenticate with. If not provided, the default account will be used. \"\"\" _block_type_name = \"Firebolt Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/3loU17IXqVIWl4aWQfqc78/3c7eefe5e8cf4eec870856f10d7fdcce/5e8a264ceaf4870c90478037_Favicon_128.svg.png?h=250\" # noqa @root_validator def _ensure_valid_auth_method ( cls , values ): \"\"\" Checks to make sure that either username and password or a token is provided. \"\"\" has_username = values . get ( \"username\" ) is not None has_password = values . get ( \"password\" ) is not None has_token = values . get ( \"token\" ) is not None # No auth details provided if not any ([ has_password , has_username , has_token ]): raise ValueError ( \"You have not provided a username/password or token. \" \"Please provide either a username and password or a token.\" ) # Username/password and token provided if ( has_username or has_password ) and has_token : raise ValueError ( \"You have provided both a username/password and a token. \" \"Please provide either a username and password or a token.\" ) # Username/password not provided together if has_username ^ has_password : raise ValueError ( \"You have provided only a username or password. \" \"Please provide both a username and a password.\" ) return values username : Optional [ str ] = Field ( default = None , description = \"The email address associated with your Firebolt user.\" , ) password : Optional [ SecretStr ] = Field ( default = None , description = \"The password used for connecting to Firebolt.\" ) token : Optional [ SecretStr ] = Field ( default = None , description = \"Authentication token to use instead of username and password.\" , ) api_endpoint : str = Field ( default = DEFAULT_API_URL , title = \"API Endpoint\" , description = \"Firebolt API endpoint used for authentication.\" , ) account_name : Optional [ str ] = Field ( default = None , description = \"Name of the account to authenticate with. If not \" \"provided, the default account will be used.\" , )","title":"FireboltCredentials"},{"location":"database/","text":"prefect_firebolt.database Module for interacting with Firebolt databases FireboltDatabase Connects to a Firebolt database. Provide either engine_name or engine_url . Providing both will result in an error. If neither engine_name nor engine_url is provided, the default engine for the configured database will be used. Attributes: Name Type Description credentials FireboltCredentials Credentials to use to connect to the Firebase database. database_name FireboltCredentials The name of the database to connect to. engine_name Optional [ str ] Name of the engine to connect to. engine_url Optional [ str ] The engine endpoint to use. additional_parameters Optional [ Dict ] Additional configuration to pass to the Firebolt connection. Source code in prefect_firebolt/database.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 class FireboltDatabase ( Block ): \"\"\" Connects to a Firebolt database. Provide either `engine_name` or `engine_url`. Providing both will result in an error. If neither `engine_name` nor `engine_url` is provided, the default engine for the configured database will be used. Attributes: credentials: Credentials to use to connect to the Firebase database. database_name: The name of the database to connect to. engine_name: Name of the engine to connect to. engine_url: The engine endpoint to use. additional_parameters: Additional configuration to pass to the Firebolt connection. \"\"\" _block_type_name = \"Firebolt Database\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/3loU17IXqVIWl4aWQfqc78/3c7eefe5e8cf4eec870856f10d7fdcce/5e8a264ceaf4870c90478037_Favicon_128.svg.png?h=250\" # noqa _description = \"Connects to a Firebolt database.\" credentials : FireboltCredentials database : str = Field ( default =... , title = \"Database Name\" , description = \"The name of the database to connect to.\" , ) engine_name : Optional [ str ] = Field ( default = None , description = \"Name of the engine to connect to. May not be used with \" \"engine_url. If neither engine_name nor engine_url is provided, the \" \"default engine for the configured database will be used.\" , ) engine_url : Optional [ str ] = Field ( default = None , title = \"Engine URL\" , description = \"The engine endpoint to use. May not be used with engine_name. \" \"If neither engine_name nor engine_url is provided, the \" \"default engine for the configured database will be used.\" , ) additional_parameters : Optional [ Dict ] = Field ( default_factory = dict , description = \"Additional configuration to pass to the Firebolt connection.\" , ) @root_validator ( pre = True ) def _not_both_engine_name_and_engine_url ( cls , values ): \"\"\"Ensures that engine_name and engine_url are not both provided\"\"\" if ( values . get ( \"engine_name\" ) is not None and values . get ( \"engine_url\" ) is not None ): raise ValueError ( \"You have provided a value for both engine_name and engine_url. \" \"Please provide either engine_name or engine_url, but not both.\" ) return values @sync_compatible async def get_connection ( self ) -> Connection : \"\"\" Creates and returns an authenticated Firebolt connection for the configured database. \"\"\" if self . credentials . token : auth = Token ( token = self . credentials . token . get_secret_value ()) elif self . credentials . username and self . credentials . password : auth = UsernamePassword ( username = self . credentials . username , password = self . credentials . password . get_secret_value (), ) else : raise ValueError ( \"Unable to initialize Firebolt auth. Expected username \" \"and password or token, but received neither.\" ) return await connect ( database = self . database , auth = auth , engine_name = self . engine_name , engine_url = self . engine_url , api_endpoint = self . credentials . api_endpoint , additional_parameters = self . additional_parameters , ) get_connection async Creates and returns an authenticated Firebolt connection for the configured database. Source code in prefect_firebolt/database.py 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 @sync_compatible async def get_connection ( self ) -> Connection : \"\"\" Creates and returns an authenticated Firebolt connection for the configured database. \"\"\" if self . credentials . token : auth = Token ( token = self . credentials . token . get_secret_value ()) elif self . credentials . username and self . credentials . password : auth = UsernamePassword ( username = self . credentials . username , password = self . credentials . password . get_secret_value (), ) else : raise ValueError ( \"Unable to initialize Firebolt auth. Expected username \" \"and password or token, but received neither.\" ) return await connect ( database = self . database , auth = auth , engine_name = self . engine_name , engine_url = self . engine_url , api_endpoint = self . credentials . api_endpoint , additional_parameters = self . additional_parameters , ) query_firebolt async Executes a query against a Firebolt database. Parameters: Name Type Description Default database FireboltDatabase Firebolt database configuration to use for query execution. required query str SQL query to execute. required parameters 'Optional[Sequence[ParameterType]]' A sequence of substitution parameters. Used to replace ? placeholders inside a query with actual values. None Returns: Type Description 'List[List[ColType]]' All rows retrieved by the query. Example Execute a query against a Firebolt database: from prefect import flow from prefect_firebolt import FireboltCredentials , FireboltDatabase , query_firebolt @flow def run_firebolt_query (): firebolt_database_block = FireboltDatabase ( database = \"travel\" , credentials = FireboltCredentials ( username = \"arthur.dent@hitchhikers.com\" , password = \"dont42panic\" ), ) results = query_firebolt ( database = firebolt_database_block , query = \"SELECT * FROM ex_intergalactic_trips LIMIT 100\" , ) return results run_firebolt_query () Source code in prefect_firebolt/database.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 @task async def query_firebolt ( database : FireboltDatabase , query : str , parameters : \"Optional[Sequence[ParameterType]]\" = None , ) -> \"List[List[ColType]]\" : \"\"\" Executes a query against a Firebolt database. Args: database: Firebolt database configuration to use for query execution. query: SQL query to execute. parameters: A sequence of substitution parameters. Used to replace `?` placeholders inside a query with actual values. Returns: All rows retrieved by the query. Example: Execute a query against a Firebolt database: ```python from prefect import flow from prefect_firebolt import FireboltCredentials, FireboltDatabase, query_firebolt @flow def run_firebolt_query(): firebolt_database_block = FireboltDatabase( database=\"travel\", credentials=FireboltCredentials( username=\"arthur.dent@hitchhikers.com\", password=\"dont42panic\" ), ) results = query_firebolt( database=firebolt_database_block, query=\"SELECT * FROM ex_intergalactic_trips LIMIT 100\", ) return results run_firebolt_query() ``` \"\"\" # noqa async with await database . get_connection () as connection : cursor = connection . cursor () with cursor : await cursor . execute ( query = query , parameters = parameters ) return await cursor . fetchall ()","title":"Database"},{"location":"database/#prefect_firebolt.database","text":"Module for interacting with Firebolt databases","title":"database"},{"location":"database/#prefect_firebolt.database.FireboltDatabase","text":"Connects to a Firebolt database. Provide either engine_name or engine_url . Providing both will result in an error. If neither engine_name nor engine_url is provided, the default engine for the configured database will be used. Attributes: Name Type Description credentials FireboltCredentials Credentials to use to connect to the Firebase database. database_name FireboltCredentials The name of the database to connect to. engine_name Optional [ str ] Name of the engine to connect to. engine_url Optional [ str ] The engine endpoint to use. additional_parameters Optional [ Dict ] Additional configuration to pass to the Firebolt connection. Source code in prefect_firebolt/database.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 class FireboltDatabase ( Block ): \"\"\" Connects to a Firebolt database. Provide either `engine_name` or `engine_url`. Providing both will result in an error. If neither `engine_name` nor `engine_url` is provided, the default engine for the configured database will be used. Attributes: credentials: Credentials to use to connect to the Firebase database. database_name: The name of the database to connect to. engine_name: Name of the engine to connect to. engine_url: The engine endpoint to use. additional_parameters: Additional configuration to pass to the Firebolt connection. \"\"\" _block_type_name = \"Firebolt Database\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/3loU17IXqVIWl4aWQfqc78/3c7eefe5e8cf4eec870856f10d7fdcce/5e8a264ceaf4870c90478037_Favicon_128.svg.png?h=250\" # noqa _description = \"Connects to a Firebolt database.\" credentials : FireboltCredentials database : str = Field ( default =... , title = \"Database Name\" , description = \"The name of the database to connect to.\" , ) engine_name : Optional [ str ] = Field ( default = None , description = \"Name of the engine to connect to. May not be used with \" \"engine_url. If neither engine_name nor engine_url is provided, the \" \"default engine for the configured database will be used.\" , ) engine_url : Optional [ str ] = Field ( default = None , title = \"Engine URL\" , description = \"The engine endpoint to use. May not be used with engine_name. \" \"If neither engine_name nor engine_url is provided, the \" \"default engine for the configured database will be used.\" , ) additional_parameters : Optional [ Dict ] = Field ( default_factory = dict , description = \"Additional configuration to pass to the Firebolt connection.\" , ) @root_validator ( pre = True ) def _not_both_engine_name_and_engine_url ( cls , values ): \"\"\"Ensures that engine_name and engine_url are not both provided\"\"\" if ( values . get ( \"engine_name\" ) is not None and values . get ( \"engine_url\" ) is not None ): raise ValueError ( \"You have provided a value for both engine_name and engine_url. \" \"Please provide either engine_name or engine_url, but not both.\" ) return values @sync_compatible async def get_connection ( self ) -> Connection : \"\"\" Creates and returns an authenticated Firebolt connection for the configured database. \"\"\" if self . credentials . token : auth = Token ( token = self . credentials . token . get_secret_value ()) elif self . credentials . username and self . credentials . password : auth = UsernamePassword ( username = self . credentials . username , password = self . credentials . password . get_secret_value (), ) else : raise ValueError ( \"Unable to initialize Firebolt auth. Expected username \" \"and password or token, but received neither.\" ) return await connect ( database = self . database , auth = auth , engine_name = self . engine_name , engine_url = self . engine_url , api_endpoint = self . credentials . api_endpoint , additional_parameters = self . additional_parameters , )","title":"FireboltDatabase"},{"location":"database/#prefect_firebolt.database.FireboltDatabase.get_connection","text":"Creates and returns an authenticated Firebolt connection for the configured database. Source code in prefect_firebolt/database.py 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 @sync_compatible async def get_connection ( self ) -> Connection : \"\"\" Creates and returns an authenticated Firebolt connection for the configured database. \"\"\" if self . credentials . token : auth = Token ( token = self . credentials . token . get_secret_value ()) elif self . credentials . username and self . credentials . password : auth = UsernamePassword ( username = self . credentials . username , password = self . credentials . password . get_secret_value (), ) else : raise ValueError ( \"Unable to initialize Firebolt auth. Expected username \" \"and password or token, but received neither.\" ) return await connect ( database = self . database , auth = auth , engine_name = self . engine_name , engine_url = self . engine_url , api_endpoint = self . credentials . api_endpoint , additional_parameters = self . additional_parameters , )","title":"get_connection()"},{"location":"database/#prefect_firebolt.database.query_firebolt","text":"Executes a query against a Firebolt database. Parameters: Name Type Description Default database FireboltDatabase Firebolt database configuration to use for query execution. required query str SQL query to execute. required parameters 'Optional[Sequence[ParameterType]]' A sequence of substitution parameters. Used to replace ? placeholders inside a query with actual values. None Returns: Type Description 'List[List[ColType]]' All rows retrieved by the query. Example Execute a query against a Firebolt database: from prefect import flow from prefect_firebolt import FireboltCredentials , FireboltDatabase , query_firebolt @flow def run_firebolt_query (): firebolt_database_block = FireboltDatabase ( database = \"travel\" , credentials = FireboltCredentials ( username = \"arthur.dent@hitchhikers.com\" , password = \"dont42panic\" ), ) results = query_firebolt ( database = firebolt_database_block , query = \"SELECT * FROM ex_intergalactic_trips LIMIT 100\" , ) return results run_firebolt_query () Source code in prefect_firebolt/database.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 @task async def query_firebolt ( database : FireboltDatabase , query : str , parameters : \"Optional[Sequence[ParameterType]]\" = None , ) -> \"List[List[ColType]]\" : \"\"\" Executes a query against a Firebolt database. Args: database: Firebolt database configuration to use for query execution. query: SQL query to execute. parameters: A sequence of substitution parameters. Used to replace `?` placeholders inside a query with actual values. Returns: All rows retrieved by the query. Example: Execute a query against a Firebolt database: ```python from prefect import flow from prefect_firebolt import FireboltCredentials, FireboltDatabase, query_firebolt @flow def run_firebolt_query(): firebolt_database_block = FireboltDatabase( database=\"travel\", credentials=FireboltCredentials( username=\"arthur.dent@hitchhikers.com\", password=\"dont42panic\" ), ) results = query_firebolt( database=firebolt_database_block, query=\"SELECT * FROM ex_intergalactic_trips LIMIT 100\", ) return results run_firebolt_query() ``` \"\"\" # noqa async with await database . get_connection () as connection : cursor = connection . cursor () with cursor : await cursor . execute ( query = query , parameters = parameters ) return await cursor . fetchall ()","title":"query_firebolt()"}]}