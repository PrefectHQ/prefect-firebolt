{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prefect-firebolt","text":""},{"location":"#welcome","title":"Welcome!","text":"<p><code>prefect-firebolt</code> is a collection of Prefect integrations for working with Firebolt data warehouses.</p> <p>Firebolt is a Cloud Data Warehousing solution that helps its users streamline their Data Analytics and access to insights. For more information about getting started with Firebolt, read Firebolt's getting started guide.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#python-setup","title":"Python setup","text":"<p>Requires an installation of Python 3.7+.</p> <p>We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.</p> <p>These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-firebolt</code> with <code>pip</code>:</p> <pre><code>pip install prefect-firebolt\n</code></pre> <p>Then, register to view the Firebolt blocks on Prefect Cloud:</p> <pre><code>prefect block register -m prefect_firebolt\n</code></pre> <p>Note, to use the <code>load</code> method on Blocks, you must already have a block document saved through code or saved through the UI.</p>"},{"location":"#write-and-run-a-flow","title":"Write and run a flow","text":"<p>Execute a query against a Firebolt database: <pre><code>from prefect import flow\n\nfrom prefect_firebolt import FireboltCredentials, FireboltDatabase, query_firebolt\n\n\n@flow\ndef run_firebolt_query():\n    firebolt_database_block = FireboltDatabase(\n        database=\"travel\",\n        credentials=FireboltCredentials(\n            username=\"arthur.dent@hitchhikers.com\", password=\"dont42panic\"\n        ),\n    )\n\n    results = query_firebolt(\n        database=firebolt_database_block,\n        query=\"SELECT * FROM ex_intergalactic_trips LIMIT 100\",\n    )\n\n    return results\n\n\nrun_firebolt_query()        \n</code></pre></p>"},{"location":"#resources","title":"Resources","text":"<p>If you encounter any bugs while using <code>prefect-firebolt</code>, feel free to open an issue in the prefect-firebolt repository.</p> <p>If you have any questions or issues while using <code>prefect-firebolt</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community.</p> <p>Feel free to \u2b50\ufe0f or watch <code>prefect-firebolt</code> for updates too!</p>"},{"location":"#development","title":"Development","text":"<p>If you'd like to install a version of <code>prefect-firebolt</code> for development, clone the repository and perform an editable install with <code>pip</code>:</p> <pre><code>git clone https://github.com/PrefectHQ/prefect-firebolt.git\n\ncd prefect-firebolt/\n\npip install -e \".[dev]\"\n\n# Install linting pre-commit hooks\npre-commit install\n</code></pre>"},{"location":"credentials/","title":"Credentials","text":""},{"location":"credentials/#prefect_firebolt.credentials","title":"<code>prefect_firebolt.credentials</code>","text":"<p>Module for managing Firebolt credentials.</p>"},{"location":"credentials/#prefect_firebolt.credentials.FireboltCredentials","title":"<code>FireboltCredentials</code>","text":"<p>Store credentials for authenticating with Firebolt.</p> <p>Attributes:</p> Name Type Description <code>username</code> <code>Optional[str]</code> <p>The email address associated with your Firebolt user.</p> <code>password</code> <code>Optional[SecretStr]</code> <p>The password used for connecting to Firebolt.</p> <code>token</code> <code>Optional[SecretStr]</code> <p>Authentication token to use instead of username and password.</p> <code>api_endpoint</code> <code>str</code> <p>Firebolt API endpoint used for authentication.</p> <code>account_name</code> <code>Optional[str]</code> <p>Name of the account to authenticate with. If not provided, the default account will be used.</p> Source code in <code>prefect_firebolt/credentials.py</code> <pre><code>class FireboltCredentials(Block):\n\"\"\"\n    Store credentials for authenticating with Firebolt.\n\n    Attributes:\n        username: The email address associated with your Firebolt user.\n        password: The password used for connecting to Firebolt.\n        token: Authentication token to use instead of username and password.\n        api_endpoint: Firebolt API endpoint used for authentication.\n        account_name: Name of the account to authenticate with.\n            If not provided, the default account will be used.\n    \"\"\"\n\n    _block_type_name = \"Firebolt Credentials\"\n    _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/3loU17IXqVIWl4aWQfqc78/3c7eefe5e8cf4eec870856f10d7fdcce/5e8a264ceaf4870c90478037_Favicon_128.svg.png?h=250\"  # noqa\n    _documentation_url = \"https://prefecthq.github.io/prefect-firebolt/credentials/#prefect_firebolt.credentials.FireboltCredentials\"  # noqa\n\n    @root_validator\n    def _ensure_valid_auth_method(cls, values):\n\"\"\"\n        Checks to make sure that either username and password or a token is provided.\n        \"\"\"\n        has_username = values.get(\"username\") is not None\n        has_password = values.get(\"password\") is not None\n        has_token = values.get(\"token\") is not None\n\n        # No auth details provided\n        if not any([has_password, has_username, has_token]):\n            raise ValueError(\n                \"You have not provided a username/password or token. \"\n                \"Please provide either a username and password or a token.\"\n            )\n        # Username/password and token provided\n        if (has_username or has_password) and has_token:\n            raise ValueError(\n                \"You have provided both a username/password and a token. \"\n                \"Please provide either a username and password or a token.\"\n            )\n        # Username/password not provided together\n        if has_username ^ has_password:\n            raise ValueError(\n                \"You have provided only a username or password. \"\n                \"Please provide both a username and a password.\"\n            )\n        return values\n\n    username: Optional[str] = Field(\n        default=None,\n        description=\"The email address associated with your Firebolt user.\",\n    )\n    password: Optional[SecretStr] = Field(\n        default=None, description=\"The password used for connecting to Firebolt.\"\n    )\n    token: Optional[SecretStr] = Field(\n        default=None,\n        description=\"Authentication token to use instead of username and password.\",\n    )\n    api_endpoint: str = Field(\n        default=DEFAULT_API_URL,\n        title=\"API Endpoint\",\n        description=\"Firebolt API endpoint used for authentication.\",\n    )\n    account_name: Optional[str] = Field(\n        default=None,\n        description=\"Name of the account to authenticate with. If not \"\n        \"provided, the default account will be used.\",\n    )\n</code></pre>"},{"location":"database/","title":"Database","text":""},{"location":"database/#prefect_firebolt.database","title":"<code>prefect_firebolt.database</code>","text":"<p>Module for interacting with Firebolt databases</p>"},{"location":"database/#prefect_firebolt.database.FireboltDatabase","title":"<code>FireboltDatabase</code>","text":"<p>Connects to a Firebolt database.</p> <p>Provide either <code>engine_name</code> or <code>engine_url</code>. Providing both will result in an error. If neither <code>engine_name</code> nor <code>engine_url</code> is provided, the default engine for the configured database will be used.</p> <p>Attributes:</p> Name Type Description <code>credentials</code> <code>FireboltCredentials</code> <p>Credentials to use to connect to the Firebase database.</p> <code>database_name</code> <code>FireboltCredentials</code> <p>The name of the database to connect to.</p> <code>engine_name</code> <code>Optional[str]</code> <p>Name of the engine to connect to.</p> <code>engine_url</code> <code>Optional[str]</code> <p>The engine endpoint to use.</p> <code>additional_parameters</code> <code>Optional[Dict]</code> <p>Additional configuration to pass to the Firebolt connection.</p> Source code in <code>prefect_firebolt/database.py</code> <pre><code>class FireboltDatabase(Block):\n\"\"\"\n    Connects to a Firebolt database.\n\n    Provide either `engine_name` or `engine_url`. Providing both will result in an\n    error. If neither `engine_name` nor `engine_url` is provided, the default engine\n    for the configured database will be used.\n\n    Attributes:\n        credentials: Credentials to use to connect to the Firebase database.\n        database_name: The name of the database to connect to.\n        engine_name: Name of the engine to connect to.\n        engine_url: The engine endpoint to use.\n        additional_parameters: Additional configuration to pass to the Firebolt\n            connection.\n    \"\"\"\n\n    _block_type_name = \"Firebolt Database\"\n    _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/3loU17IXqVIWl4aWQfqc78/3c7eefe5e8cf4eec870856f10d7fdcce/5e8a264ceaf4870c90478037_Favicon_128.svg.png?h=250\"  # noqa\n    _documentation_url = \"https://prefecthq.github.io/prefect-firebolt/database/#prefect_firebolt.database.FireboltDatabase\"  # noqa\n    _description = \"Connects to a Firebolt database.\"\n\n    credentials: FireboltCredentials\n    database: str = Field(\n        default=...,\n        title=\"Database Name\",\n        description=\"The name of the database to connect to.\",\n    )\n    engine_name: Optional[str] = Field(\n        default=None,\n        description=\"Name of the engine to connect to. May not be used with \"\n        \"engine_url. If neither engine_name nor engine_url is provided, the \"\n        \"default engine for the configured database will be used.\",\n    )\n    engine_url: Optional[str] = Field(\n        default=None,\n        title=\"Engine URL\",\n        description=\"The engine endpoint to use. May not be used with engine_name. \"\n        \"If neither engine_name nor engine_url is provided, the \"\n        \"default engine for the configured database will be used.\",\n    )\n    additional_parameters: Optional[Dict] = Field(\n        default_factory=dict,\n        description=\"Additional configuration to pass to the Firebolt connection.\",\n    )\n\n    @root_validator(pre=True)\n    def _not_both_engine_name_and_engine_url(cls, values):\n\"\"\"Ensures that engine_name and engine_url are not both provided\"\"\"\n        if (\n            values.get(\"engine_name\") is not None\n            and values.get(\"engine_url\") is not None\n        ):\n            raise ValueError(\n                \"You have provided a value for both engine_name and engine_url. \"\n                \"Please provide either engine_name or engine_url, but not both.\"\n            )\n        return values\n\n    @sync_compatible\n    async def get_connection(self) -&gt; Connection:\n\"\"\"\n        Creates and returns an authenticated Firebolt connection for the\n        configured database.\n        \"\"\"\n        if self.credentials.token:\n            auth = Token(token=self.credentials.token.get_secret_value())\n        elif self.credentials.username and self.credentials.password:\n            auth = UsernamePassword(\n                username=self.credentials.username,\n                password=self.credentials.password.get_secret_value(),\n            )\n        else:\n            raise ValueError(\n                \"Unable to initialize Firebolt auth. Expected username \"\n                \"and password or token, but received neither.\"\n            )\n\n        return await connect(\n            database=self.database,\n            auth=auth,\n            engine_name=self.engine_name,\n            engine_url=self.engine_url,\n            api_endpoint=self.credentials.api_endpoint,\n            additional_parameters=self.additional_parameters,\n        )\n</code></pre>"},{"location":"database/#prefect_firebolt.database.FireboltDatabase.get_connection","title":"<code>get_connection</code>  <code>async</code>","text":"<p>Creates and returns an authenticated Firebolt connection for the configured database.</p> Source code in <code>prefect_firebolt/database.py</code> <pre><code>@sync_compatible\nasync def get_connection(self) -&gt; Connection:\n\"\"\"\n    Creates and returns an authenticated Firebolt connection for the\n    configured database.\n    \"\"\"\n    if self.credentials.token:\n        auth = Token(token=self.credentials.token.get_secret_value())\n    elif self.credentials.username and self.credentials.password:\n        auth = UsernamePassword(\n            username=self.credentials.username,\n            password=self.credentials.password.get_secret_value(),\n        )\n    else:\n        raise ValueError(\n            \"Unable to initialize Firebolt auth. Expected username \"\n            \"and password or token, but received neither.\"\n        )\n\n    return await connect(\n        database=self.database,\n        auth=auth,\n        engine_name=self.engine_name,\n        engine_url=self.engine_url,\n        api_endpoint=self.credentials.api_endpoint,\n        additional_parameters=self.additional_parameters,\n    )\n</code></pre>"},{"location":"database/#prefect_firebolt.database.query_firebolt","title":"<code>query_firebolt</code>  <code>async</code>","text":"<p>Executes a query against a Firebolt database.</p> <p>Parameters:</p> Name Type Description Default <code>database</code> <code>FireboltDatabase</code> <p>Firebolt database configuration to use for query execution.</p> required <code>query</code> <code>str</code> <p>SQL query to execute.</p> required <code>parameters</code> <code>Optional[Sequence[ParameterType]]</code> <p>A sequence of substitution parameters. Used to replace <code>?</code> placeholders inside a query with actual values.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[List[ColType]]</code> <p>All rows retrieved by the query.</p> Example <p>Execute a query against a Firebolt database: <pre><code>from prefect import flow\n\nfrom prefect_firebolt import FireboltCredentials, FireboltDatabase, query_firebolt\n\n\n@flow\ndef run_firebolt_query():\n    firebolt_database_block = FireboltDatabase(\n        database=\"travel\",\n        credentials=FireboltCredentials(\n            username=\"arthur.dent@hitchhikers.com\", password=\"dont42panic\"\n        ),\n    )\n\n    results = query_firebolt(\n        database=firebolt_database_block,\n        query=\"SELECT * FROM ex_intergalactic_trips LIMIT 100\",\n    )\n\n    return results\n\n\nrun_firebolt_query()\n</code></pre></p> Source code in <code>prefect_firebolt/database.py</code> <pre><code>@task\nasync def query_firebolt(\n    database: FireboltDatabase,\n    query: str,\n    parameters: \"Optional[Sequence[ParameterType]]\" = None,\n) -&gt; \"List[List[ColType]]\":\n\"\"\"\n    Executes a query against a Firebolt database.\n\n    Args:\n        database: Firebolt database configuration to use for query execution.\n        query: SQL query to execute.\n        parameters: A sequence of substitution parameters. Used to replace `?`\n            placeholders inside a query with actual values.\n\n    Returns:\n        All rows retrieved by the query.\n\n    Example:\n        Execute a query against a Firebolt database:\n        ```python\n        from prefect import flow\n\n        from prefect_firebolt import FireboltCredentials, FireboltDatabase, query_firebolt\n\n\n        @flow\n        def run_firebolt_query():\n            firebolt_database_block = FireboltDatabase(\n                database=\"travel\",\n                credentials=FireboltCredentials(\n                    username=\"arthur.dent@hitchhikers.com\", password=\"dont42panic\"\n                ),\n            )\n\n            results = query_firebolt(\n                database=firebolt_database_block,\n                query=\"SELECT * FROM ex_intergalactic_trips LIMIT 100\",\n            )\n\n            return results\n\n\n        run_firebolt_query()\n        ```\n    \"\"\"  # noqa\n    async with await database.get_connection() as connection:\n        cursor = connection.cursor()\n        with cursor:\n            await cursor.execute(query=query, parameters=parameters)\n            return await cursor.fetchall()\n</code></pre>"}]}